{
    "fileTypes": [
        "usp"
    ],
    "foldingStartMarker": "(?x)\n\t\t /\\*\\*(?!\\*)\n\t\t|^(?![^{]*?//|[^{]*?/\\*(?!.*?\\*/.*?\\{)).*?\\{\\s*($|//|/\\*(?!.*?\\*/.*\\S))\n\t",
    "foldingStopMarker": "(?<!\\*)\\*\\*/|^\\s*\\}",
    "keyEquivalent": "^~U",
    "name": "Crestron",
    "patterns": [
        {
            "include": "#crestron_keywords"
        },
        {
            "include": "#block"
        },
        {
            "include": "#special_block"
        },
        {
            "include": "#comments"
        },
        {
            "match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b",
            "name": "constant.numeric"
        },
        {
            "begin": "(?x)\n    \t\t\t\t(?:  ^                                 # begin-of-line\n    \t\t\t\t  |  (?: (?<!else|=) )             #  or word + space before name\n    \t\t\t\t)\n    \t\t\t\t((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n    \t\t\t\t \\s*(\\()                           # start bracket or end-of-line\n    \t\t\t",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                },
                "2": {
                    "name": "punctuation.definition.parameters"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.parameters"
                }
            },
        },
        {
            "begin": "(?x)\n    \t\t\t\t(?:  ^                                 # begin-of-line\n    \t\t\t\t  |  (?: (?<!else|=) )             #  or word + space before name\n    \t\t\t\t)\n    \t\t\t\t((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n    \t\t\t\t \\s*(\\()                           # terminating semi-colon\n    \t\t\t",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function"
                },
                "2": {
                    "name": "punctuation.definition.parameters"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.parameters"
                }
            },
        },
        {
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.usp"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.usp"
                }
            },
            "name": "string.quoted.double.usp",
            "patterns": [
                {
                    "include": "#string_escaped_char"
                },
                {
                    "include": "#string_placeholder"
                }
            ]
        },
        {
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.usp"
                }
            },
            "end": "'",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.usp"
                }
            },
            "name": "string.quoted.single.usp",
            "patterns": [
                {
                    "include": "#string_escaped_char"
                }
            ]
        },
        {
            "begin": "(?ix)\n        \t\t^\\s*(\\#(?i:define_constant))\\s+             # define\n        \t\t((?<id>[a-zA-Z_][a-zA-Z0-9_]*))  # macro name\n        \t\t(?:                              # and optionally:\n        \t\t    (\\()                         # an open parenthesis\n        \t\t        (\n        \t\t            \\s* \\g<id> \\s*       # first argument\n        \t\t            ((,) \\s* \\g<id> \\s*)*  # additional arguments\n        \t\t            (?:\\.\\.\\.)?          # varargs ellipsis?\n        \t\t        )\n        \t\t    (\\))                         # a close parenthesis\n        \t\t)?\n        \t",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.import.define.usp"
                },
                "2": {
                    "name": "entity.name.function.preprocessor.usp"
                },
                "4": {
                    "name": "punctuation.definition.parameters.usp"
                },
                "5": {
                    "name": "variable.parameter.preprocessor.usp"
                },
                "7": {
                    "name": "punctuation.separator.parameters.usp"
                },
                "8": {
                    "name": "punctuation.definition.parameters.usp"
                }
            },
            "end": "(?=(?://|/\\*))|$",
            "name": "meta.preprocessor.macro.usp",
            "patterns": [
                {
                    "match": "(?>\\\\\\s*\\n)",
                    "name": "punctuation.separator.continuation.usp"
                },
                {
                    "include": "$base"
                }
            ]
        },
        {
            "comment": "function name highlighting",
            "begin": "(?x)\n    \t\t(?:  ^                                 # begin-of-line\n    \t\t  |\n    \t\t     (?: (?= \\s )           (?<!else|new|return) (?<=\\w)      #  or word + space before name\n    \t\t       | (?= \\s*[A-Za-z_] ) (?<!&&)       (?<=[*&>])   #  or type modifier before name\n    \t\t     )\n    \t\t)\n    \t\t(\\s*) (?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\\s*\\()\n    \t\t(\n    \t\t\t(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++ |                  # actual name\n    \t\t\t(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )  # if it is a C++ operator\n    \t\t)\n    \t\t \\s*(?=\\()",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.whitespace.function.leading.usp"
                },
                "3": {
                    "name": "entity.name.function.usp"
                },
                "4": {
                    "name": "punctuation.definition.parameters.usp"
                }
            },
            "end": "(?<=\\})|(?=#)|(;)",
            "name": "meta.function.usp",
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#parens"
                },
                {
                    "match": "\\b(const|override)\\b",
                    "name": "storage.modifier.usp"
                },
                {
                    "include": "#block"
                }
            ]
        }
    ],
    "repository": {
        "crestron_keywords": {
            "patterns": [
                {
                    "comment": "Crestron Compiler Directives",
                    "match": "(?i:#\\b(analog_serial_expand|category|crestron_library|default_nonvolatile|default_volatile|digital_expand|enable_dynamic|enable_stack_checking|enable_trace|encoding_ascii|encoding_utf16|encoding_inherit_from_parent|encoding_inherit_from_program|help|help_begin|help_end|help_pdf_file|hint|if_defined|if_not_defined|endif|if_series2|if_series3|large_stack|max_internal_buffer_size|output_shift|print_to_trace|symbol_name|user_library)\\b|parameter_properties)",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron CEN-OEM Definitions",
                    "match": "(?i:#\\b(analog_input_join|analog_output_join|digital_input_join|digital_output_join|string_input_join|string_output_join)\\b)",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron Declarations",
                    "match": "\\b(?i:analog_input|analog_output|buffer_input|digital_input|digital_output|integer|integer_parameter|long_integer|long_integer_parameter|nonvolatile|signed_integer|signed_integer_parameter|signed_long_integer|signed_long_integer_parameter|string|string_input|string_output|string_parameter|structure|volatile)\\b",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron Skip Type",
                    "match": "\\b(?i:_skip_)\\b",
                    "name": "constant.language"
                },
                {
                    "comment": "Crestron Function Declarations",
                    "match": "\\b(?i:function|string_function|integer_function)\\b",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron Boolean Types",
                    "match": "\\b(?i:true|false)\\b",
                    "name": "constant.language"
                },
                {
                    "comment": "Crestron Statements",
                    "match": "\\b(?i:return|case|default)\\b",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron Exceptions",
                    "match": "\\b(?i:try|catch|GetExceptionCode|GetExceptionMessage)\\b",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron Conditionals",
                    "match": "\\b(?i:break|cswitch|if|else|switch|do|until|for|while|to)\\b",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron Events",
                    "match": "\\b(?i:push|change|release|event|socketconnect)\\b",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron Array Functions",
                    "match": "\\b(?i:GetLastModifiedArrayIndex|GetNumArrayCols|GetNumArrayRows|GetNumStructureArrayCols|ResizeArray|ResizeStructureArray|SetArray)\\b",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron Bit/Byte Functions",
                    "match": "\\b(?i:bit|byte|high|highWord|low|LowerChar|LowWord|RotateLeft|RotateLeftLong|RotateRight|RotateRightLong|SetByte|UpperChar)\\b",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron CEN-OEM Functions",
                    "match": "\\b(?i:_oem_break|_oem_cd|_oem_cts|_oem_dtr|_oem_long_break|_oem_max_string|_oem_pacing|_oem_rts|_oem_str_in|_oem_str_out)\\b",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron Data Conversion Functions",
                    "match": "\\b(?i:atoi|atol|chr|HexToI|HexToL|HexToSI|HexToSL|itoa|itohex|ltoa|ltohex)\\b",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron Socket Access Functions",
                    "match": "\\b(?i:SocketConnect|SocketConnectClient|SocketDisconnect|SocketDisconnectClient|SocketGetAddressAsRequested|SocketGetPortNumber|SocketGetRemoteIPAddress|SocketGetSenderIPAddress|SocketGetStatus|SocketIsBroadcast|SocketIsMulticast|SocketReceive|SocketSend|SocketServerStartListen|SocketServerStopListen|SocketStatus|SocketUDP_Disable|SocketUDP_Enable)\\b",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron Email Functions",
                    "match": "\\b(?i:SendMail|SendMailAdvance|SendMailWithAttachments)\\b",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron Encoding Functions",
                    "match": "\\b(?i:ascii|GetEncoding|SetEncoding|Inherit|ToASCII)\\b",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron File Functions",
                    "match": "\\b(?i:file_info|FileBOF|FileClose|FileDelete|FileDeleteShared|FileEOF|FileLength|FileOpen|FileOpenShared|FileRead|FileSeek|FileWrite|FindClose|FindFirst|FindFirstShared|FindNext|GetCurrentDirectory|IsDirectory|IsHidden|IsReadOnly|IsSystem|IsVolume|MakeDirectory|MakeDirectoryShared|ReadInteger|ReadIntegerArray|ReadLongInteger|ReadLongIntegerArray|ReadSignedInteger|ReadSignedIntegerArray|ReadSignedLongInteger|ReadSignedLongIntegerArray|ReadString|ReadStringArray|ReadStructure|RemoveDirectory|RemoveDirectoryShared|SetCurrentDirectory|StartFileOperations|WaitForNewDisk|WriteInteger|WriteIntegerArray|WriteLongInteger|WriteLongIntegerArray|WriteSignedInteger|WriteSignedIntegerArray|WriteSignedLongInteger|WriteSignedLongIntegerArray|WriteString|WriteStringArray|WriteStructure)\\b",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron Math Functions",
                    "match": "\\b(?i:abs|max|min|muldiv|smax|smin)\\b",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron Ramp Functions",
                    "match": "\\b(?i:CompareRampsByAttribute|CompareRampsByID|CreateRamp|GetRampInfo|InitializeRampInfo|InitializeRampInfoArray|IsRamping|ramp_info|StopRamp)\\b",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron Random Number Functions",
                    "match": "\\b(?i:random|rnd|seed)\\b",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron String Functions",
                    "match": "\\b(?i:makestring|print|trace|ClearBuffer|CompareStrings|CompareStringsNoCase|find|FindNoCase|gather|GatherByLength|GetC|left|len|lower|mid|remove|RemoveByLength|ResizeString|ReverseFind|ReverseFindNoCase|right|SetString|upper)\\b",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron System Control Functions",
                    "match": "\\b(?i:delay|ProcessLogic|pulse|TerminateEvent|WaitForInitializationComplete)\\b",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron System Initialization Functions",
                    "match": "\\b(?i:GenerateUserError|GenerateUserNotice|GenerateUserWarning|GetCIP|GetCrestnet|GetModelNumber|GetProgramNumber|GetSeries|GetSlot|GetSymbolInstanceName|GetSymbolReferenceName|IsSignalDefined|MakeProgramFilename|SendCresnetPacket|SendPacketToCPU|SetCIP|SetCresnet|SetSlot)\\b",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron Time/Date Functions",
                    "match": "\\b(?i:date|day|FileDate|FileDay|FileGetDateNum|FileGetDayOfWeekNum|FileGetHourNum|FileGetMinutesNum|FileGetMonthNum|FileGetSecondsNum|FileGetYearNum|FileMonth|FileTime|GetDateNum|GetDayOfWeekNum|GetDST|GetGMTOffset|GetHourNum|GetHSeconds|GetMinutesNum|GetMonthNum|GetSecondsNum|GetTicks|GetYearNum|month|SetClock|SetDate|SetGMTOffset|time)\\b",
                    "name": "keyword"
                },
                {
                    "comment": "Crestron Wait Functions",
                    "match": "\\b(?i:CancelAllWait|CancelWait|PauseAllWait|PauseWait|ResumeAllWait|ResumeWait|RetimeWait|wait)\\b",
                    "name": "keyword"
                }
            ]
        },
        "angle_brackets": {
            "begin": "<",
            "end": ">",
            "name": "meta.angle-brackets.usp",
            "patterns": [
                {
                    "include": "#angle_brackets"
                },
                {
                    "include": "$base"
                }
            ]
        },
        "block": {
            "begin": "\\{",
            "end": "\\}",
            "name": "meta.block.usp",
            "patterns": [
                {
                    "include": "#block_innards"
                }
            ]
        },
        "block_innards": {
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.whitespace.support.function.leading.usp"
                        },
                        "2": {
                            "name": "support.function.C99.usp"
                        }
                    },
                    "match": "(\\s*)\\b(hypot(f|l)?|s(scanf|ystem|nprintf|ca(nf|lb(n(f|l)?|ln(f|l)?))|i(n(h(f|l)?|f|l)?|gn(al|bit))|tr(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(jmp|vbuf|locale|buf)|qrt(f|l)?|w(scanf|printf)|rand)|n(e(arbyint(f|l)?|xt(toward(f|l)?|after(f|l)?))|an(f|l)?)|c(s(in(h(f|l)?|f|l)?|qrt(f|l)?)|cos(h(f)?|f|l)?|imag(f|l)?|t(ime|an(h(f|l)?|f|l)?)|o(s(h(f|l)?|f|l)?|nj(f|l)?|pysign(f|l)?)|p(ow(f|l)?|roj(f|l)?)|e(il(f|l)?|xp(f|l)?)|l(o(ck|g(f|l)?)|earerr)|a(sin(h(f|l)?|f|l)?|cos(h(f|l)?|f|l)?|tan(h(f|l)?|f|l)?|lloc|rg(f|l)?|bs(f|l)?)|real(f|l)?|brt(f|l)?)|t(ime|o(upper|lower)|an(h(f|l)?|f|l)?|runc(f|l)?|gamma(f|l)?|mp(nam|file))|i(s(space|n(ormal|an)|cntrl|inf|digit|u(nordered|pper)|p(unct|rint)|finite|w(space|c(ntrl|type)|digit|upper|p(unct|rint)|lower|al(num|pha)|graph|xdigit|blank)|l(ower|ess(equal|greater)?)|al(num|pha)|gr(eater(equal)?|aph)|xdigit|blank)|logb(f|l)?|max(div|abs))|di(v|fftime)|_Exit|unget(c|wc)|p(ow(f|l)?|ut(s|c(har)?|wc(har)?)|error|rintf)|e(rf(c(f|l)?|f|l)?|x(it|p(2(f|l)?|f|l|m1(f|l)?)?))|v(s(scanf|nprintf|canf|printf|w(scanf|printf))|printf|f(scanf|printf|w(scanf|printf))|w(scanf|printf)|a_(start|copy|end|arg))|qsort|f(s(canf|e(tpos|ek))|close|tell|open|dim(f|l)?|p(classify|ut(s|c|w(s|c))|rintf)|e(holdexcept|set(e(nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(aiseexcept|ror)|get(e(nv|xceptflag)|round))|flush|w(scanf|ide|printf|rite)|loor(f|l)?|abs(f|l)?|get(s|c|pos|w(s|c))|re(open|e|ad|xp(f|l)?)|m(in(f|l)?|od(f|l)?|a(f|l|x(f|l)?)?))|l(d(iv|exp(f|l)?)|o(ngjmp|cal(time|econv)|g(1(p(f|l)?|0(f|l)?)|2(f|l)?|f|l|b(f|l)?)?)|abs|l(div|abs|r(int(f|l)?|ound(f|l)?))|r(int(f|l)?|ound(f|l)?)|gamma(f|l)?)|w(scanf|c(s(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?|mbs)|pbrk|ftime|len|r(chr|tombs)|xfrm)|to(b|mb)|rtomb)|printf|mem(set|c(hr|py|mp)|move))|a(s(sert|ctime|in(h(f|l)?|f|l)?)|cos(h(f|l)?|f|l)?|t(o(i|f|l(l)?)|exit|an(h(f|l)?|2(f|l)?|f|l)?)|b(s|ort))|g(et(s|c(har)?|env|wc(har)?)|mtime)|r(int(f|l)?|ound(f|l)?|e(name|alloc|wind|m(ove|quo(f|l)?|ainder(f|l)?))|a(nd|ise))|b(search|towc)|m(odf(f|l)?|em(set|c(hr|py|mp)|move)|ktime|alloc|b(s(init|towcs|rtowcs)|towc|len|r(towc|len))))\\b"
                },
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.whitespace.function-call.leading.usp"
                        },
                        "2": {
                            "name": "support.function.any-method.usp"
                        },
                        "3": {
                            "name": "punctuation.definition.parameters.usp"
                        }
                    },
                    "match": "(?x) (?: (?= \\s )  (?:(?<=else|new|return) | (?<!\\w)) (\\s+))?\n\t\t\t(\\b\n\t\t\t\t(?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\\s*\\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\b | :: )++                  # actual name\n\t\t\t)\n\t\t\t \\s*(\\()",
                    "name": "meta.function-call.usp"
                },
                {
                    "captures": {
                        "1": {
                            "name": "variable.other.usp"
                        },
                        "2": {
                            "name": "punctuation.definition.parameters.usp"
                        }
                    },
                    "match": "(?x)\n\t\t\t        (?x)\n\t\t\t(?:\n\t\t\t     (?: (?= \\s )           (?<!else|new|return) (?<=\\w)\\s+      #  or word + space before name\n\t\t\t     )\n\t\t\t)\n\t\t\t(\n\t\t\t\t(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++    |              # actual name\n\t\t\t\t(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )?  # if it is a C++ operator\n\t\t\t)\n\t\t\t \\s*(\\()",
                    "name": "meta.initialization.usp"
                },
                {
                    "include": "#block"
                },
                {
                    "include": "$base"
                }
            ]
        },
        "parens": {
            "begin": "\\(",
            "end": "\\)",
            "name": "meta.parens.usp",
            "patterns": [
                {
                    "include": "$base"
                }
            ]
        },
        "string_escaped_char": {
            "patterns": [
                {
                    "match": "\\\\(\\\\|[abefnprtv'\"?]|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})",
                    "name": "constant.character.escape.usp"
                },
                {
                    "match": "\\\\.",
                    "name": "invalid.illegal.unknown-escape.usp"
                }
            ]
        },
        "string_placeholder": {
            "patterns": [
                {
                    "match": "(?x)%\n    \t\t\t\t\t\t(\\d+\\$)?                             # field (argument #)\n    \t\t\t\t\t\t[#0\\- +']*                           # flags\n    \t\t\t\t\t\t[,;:_]?                              # separator character (AltiVec)\n    \t\t\t\t\t\t((-?\\d+)|\\*(-?\\d+\\$)?)?              # minimum field width\n    \t\t\t\t\t\t(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?         # precision\n    \t\t\t\t\t\t(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n    \t\t\t\t\t\t[diouxXDOUeEfFgGaACcSspn%]           # conversion type\n    \t\t\t\t\t",
                    "name": "constant.other.placeholder.usp"
                },
                {
                    "match": "%",
                    "name": "invalid.illegal.placeholder.usp"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "comment"
                        }
                    },
                    "match": "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?",
                    "name": "comment.block.usp"
                },
                {
                    "begin": "/\\*",
                    "captures": {
                        "0": {
                            "name": "comment"
                        }
                    },
                    "end": "\\*/",
                    "name": "comment.block"
                },
                {
                    "match": "\\*/.*\\n",
                    "name": "comment"
                },
                {
                    "captures": {
                        "1": {
                            "name": "comment"
                        }
                    },
                    "match": "^// =(\\s*.*?)\\s*=\\s*$\\n?",
                    "name": "comment.line"
                },
                {
                    "begin": "//",
                    "beginCaptures": {
                        "0": {
                            "name": "comment"
                        }
                    },
                    "end": "$\\n?",
                    "name": "comment.line.double-slash",
                    "patterns": [
                        {
                            "match": "(?>\\\\\\s*\\n)",
                            "name": "comment"
                        }
                    ]
                }
            ]
        },
        "constructor": {
            "patterns": [
                {
                    "begin": "(?x)\n    \t\t\t\t(?:  ^\\s*)                             # begin-of-line\n    \t\t\t\t((?!while|for|do|if|else|switch|catch|enumerate|r?iterate)[A-Za-z_][A-Za-z0-9_:]*) # actual name\n    \t\t\t\t \\s*(\\()                            # start bracket or end-of-line\n    \t\t\t",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.function.usp"
                        },
                        "2": {
                            "name": "punctuation.definition.parameters.usp"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.parameters.usp"
                        }
                    },
                    "name": "meta.function.constructor.usp",
                    "patterns": [
                        {
                            "include": "$base"
                        }
                    ]
                },
                {
                    "begin": "(?x)\n    \t\t\t\t(:)                            # begin-of-line\n    \t\t\t\t((?=\\s*[A-Za-z_][A-Za-z0-9_:]* # actual name\n    \t\t\t\t \\s*(\\()))                      # start bracket or end-of-line\n    \t\t\t",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.parameters.usp"
                        }
                    },
                    "end": "(?=\\{)",
                    "name": "meta.function.constructor.initializer-list.usp",
                    "patterns": [
                        {
                            "include": "$base"
                        }
                    ]
                }
            ]
        },
        "special_block": {
            "patterns": [
                {
                    "begin": "\\b(namespace)\\s+([A-Za-z_][_A-Za-z0-9:]*\\b)?+(?!\\s*?(;|=|,))",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.usp"
                        }
                    },
                    "end": "(?<=\\})",
                    "name": "meta.namespace-block.usp",
                    "patterns": [
                        {
                            "begin": "\\{",
                            "end": "\\}",
                            "patterns": [
                                {
                                    "include": "#special_block"
                                },
                                {
                                    "include": "#constructor"
                                },
                                {
                                    "include": "$base"
                                }
                            ]
                        }
                    ]
                },
                {
                    "captures": {
                        "1": {
                            "name": "storage.type.usp"
                        },
                        "2": {
                            "name": "entity.name.type.forward-decl.usp"
                        }
                    },
                    "match": "\\b(class|struct)\\s+([_A-Za-z][_A-Za-z0-9]*\\b);",
                    "name": "meta.class-struct-block.usp"
                },
                {
                    "begin": "\\b(class|struct)\\s+([_A-Za-z][_A-Za-z0-9]*\\b)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.usp"
                        },
                        "2": {
                            "name": "entity.name.type.usp"
                        }
                    },
                    "end": "(?<=\\})|(?=(;|,|\\(|\\)|>|\\[|\\]))",
                    "name": "meta.class-struct-block.usp",
                    "patterns": [
                        {
                            "include": "#angle_brackets"
                        },
                        {
                            "begin": "(?<!:):(?!:)",
                            "end": "(?=\\{)",
                            "name": "meta.class-struct-block.base-classes.usp",
                            "patterns": [
                                {
                                    "match": "\\b(private|protected|public|virtual)",
                                    "name": "storage.modifier.usp"
                                },
                                {
                                    "begin": "[_A-Za-z][_A-Za-z0-9]*\\b",
                                    "end": ",|(?=\\{)",
                                    "patterns": [
                                        {
                                            "include": "#angle_brackets"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "begin": "(\\{)",
                            "beginCaptures": {
                                "1": {
                                    "name": "punctuation.definition.scope.usp"
                                }
                            },
                            "end": "(\\})(\\s*\\n)?",
                            "endCaptures": {
                                "1": {
                                    "name": "punctuation.definition.invalid.usp"
                                },
                                "2": {
                                    "name": "invalid.illegal.you-forgot-semicolon.usp"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#special_block"
                                },
                                {
                                    "include": "#constructor"
                                },
                                {
                                    "include": "$base"
                                }
                            ]
                        },
                        {
                            "include": "$base"
                        }
                    ]
                },
                {
                    "begin": "\\b(extern)(?=\\s*\")",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.modifier.usp"
                        }
                    },
                    "end": "(?<=\\})|(?=\\w)",
                    "name": "meta.extern-block.usp",
                    "patterns": [
                        {
                            "begin": "\\{",
                            "end": "\\}",
                            "patterns": [
                                {
                                    "include": "#special_block"
                                },
                                {
                                    "include": "$base"
                                }
                            ]
                        },
                        {
                            "include": "$base"
                        }
                    ]
                }
            ]
        }
    },
    "scopeName": "source.usp",
    "uuid": "26251B18-6B1D-11D9-AFDB-000D93589AF6"
}